module Tests.Nar.Base.Array

import Nar.Base.Array exposing *

def hidden size = 500

def tests: Test =
  describe("Array") <|
  [ describe("Initialization") <|
    [ test("initialize") <|
      \( () ) ->
        toList(initialize(size, identity))
          |> Expect.equal(List.range(0, size - 1))
    , test("push") <|
      \( () ) ->
        List.foldl(push, empty, List.range(0, size - 1))
          |> Expect.equal(initialize(size, identity))
    , test("initialize non-identity") <|
      \( () ) ->
        toList(initialize(4, \(n) -> n * n))
          |> Expect.equal([ 0, 1, 4, 9 ])
    , test("initialize empty") <|
      \( () ) ->
        toList(initialize(0, identity))
          |> Expect.equal([])
    , test("initialize negative") <|
      \( () ) ->
        toList(initialize(-2, identity))
          |> Expect.equal([])
    ]
  , describe("isEmpty") <|
    [ test("all empty arrays are equal") <|
      \( () ) ->
        Expect.equal(empty, fromList([]))
    , test("empty array") <|
      \( () ) ->
        isEmpty(empty)
          |> Expect.equal(True)
    , test("empty converted array") <|
      \( () ) ->
        isEmpty(fromList([]))
          |> Expect.equal(True)
    , test("non-empty array") <|
      \( () ) ->
        isEmpty(fromList([ 1 ]))
          |> Expect.equal(False)
    ]
  , describe("Length") <|
    [ test("empty array") <|
      \( () ) ->
        length(empty)
          |> Expect.equal(0)
    , test("non-empty array") <|
      \( () ) ->
        length(initialize(size, identity))
          |> Expect.equal(size)
    , test("push") <|
      \( () ) ->
        length(push(size, initialize(size, identity)))
          |> Expect.equal(size + 1)
    , test("append") <|
      \( () ) ->
        length(append(initialize(size, identity), initialize(size / 2, identity)))
          |> Expect.equal(size + (size / 2))
    , test("set does not increase") <|
      \( () ) ->
        length(set(size / 2, 1, initialize(size, identity)))
          |> Expect.equal(size)
    , test("big slice") <|
      \( () ) ->
        length(slice(35, -35, initialize(size, identity)))
          |> Expect.equal(size - 70)
    , test("small slice end") <|
      \( () ) ->
        length(slice(0, -3, initialize(size, identity)))
          |> Expect.equal(size - 3)
    ]
  , describe("Get and set") <|
    [ test("can retrieve element") <|
      \( () ) ->
        get(size, initialize((size + 1), identity))
            |> Expect.equal(Just(size))
    , test("out of bounds retrieval returns nothing") <|
      \( () ) ->
        let arr = initialize(size, identity)
        in ( get(-1, arr), get(size, arr), get(size + 1, arr) )
          |> Expect.equal(( Nothing, Nothing, Nothing ))
    , test("set replaces value") <|
      \( () ) ->
        get(size, set(size, -1, initialize(size + 1, identity)))
          |> Expect.equal(Just(-1))
    , test("set out of bounds returns original array") <|
      \( () ) ->
        let arr = initialize(size, identity)
        in
          set(-1, 5, arr)
            |> set(size, 5)
            |> set(size + 1, 5)
            |> Expect.equal(arr)
    , test("Retrieval works from tail") <|
      \( () ) ->
        get(1030, set(1030, 5, initialize(1035, identity)))
          |> Expect.equal(Just(5))
    ]
  , describe("Conversion") <|
    [ test("back and forth") <|
      \( () ) ->
        let ls = List.range(0, size - 1)
        in
          toList(fromList(ls))
            |> Expect.equal(ls)
    , test("indexed") <|
      \( () ) ->
        toIndexedList(initialize(size, (+)(1)))
          |> Expect.equal(toList(initialize(size, \(idx) -> ( idx, idx + 1 ))))
    ]
  , describe("Transform") <|
    [ test("foldl") <|
      \( () ) ->
        foldl((|), [], initialize(size, identity))
          |> Expect.equal(List.reverse(List.range(0, size - 1)))
    , test("foldr") <|
      \( () ) ->
        foldr(\(n, acc) -> n | acc, [], initialize(size, identity))
          |> Expect.equal(List.range(0, size - 1))
    , test("filter") <|
      \( () ) ->
        toList(filter(\(a) -> modBy(2, a) == 0, initialize(size, identity)))
          |> Expect.equal(List.filter(\(a) -> modBy(2, a) == 0, List.range(0, size - 1)))
    , test("map") <|
      \( () ) ->
        map((+)(1), initialize(size, identity))
          |> Expect.equal(initialize(size, (+)(1)))
    , test("indexedMap") <|
      \( () ) ->
        indexedMap((*), repeat(size, 5))
          |> Expect.equal(initialize(size, (*)(5)))
    , test("push appends one element") <|
      \( () ) ->
        push(size, initialize(size, identity))
         |> Expect.equal(initialize(size + 1, identity))
    , test("append") <|
      \( () ) ->
        append(initialize(size, identity), initialize(size, (+)(size)))
          |> Expect.equal(initialize(size * 2, identity))
    , test("small appends") <|
      \( () ) ->
        append(initialize(size, identity), initialize(16, (+)(size)))
          |> Expect.equal(initialize(size + 16, identity))
    ]
  , describe("Slice") <|
    let smallSample = fromList(List.range(1, 8))
    in
      [ test("both") <|
        \( () ) ->
          slice(5, -10, initialize(size, identity))
            |> Expect.equal(initialize(size - 5 - 10, \(idx) -> idx + 5))
      , test("left") <|
        \( () ) ->
          let arr = initialize(size, identity)
          in
            slice(5, length(arr), arr)
              |> Expect.equal(initialize(size - 5, \(idx) -> idx + 5))
      , test("right") <|
        \( () ) ->
          slice(0, -5, initialize(size, identity))
            |> Expect.equal(initialize(size - 5, identity))
      , test("slicing all but the last item") <|
        \( () ) ->
          initialize(size, identity)
            |> slice(-1, size)
            |> toList
            |> Expect.equal([ size - 1 ])
      , test("both small") <|
        \( () ) ->
          toList(slice(2, 5, smallSample))
            |> Expect.equal(List.range(3, 5))
      , test("start small") <|
        \( () ) ->
          toList(slice(2, length(smallSample), smallSample))
            |> Expect.equal(List.range(3, 8))
      , test("negative") <|
        \( () ) ->
          toList(slice(-5, -2, smallSample))
            |> Expect.equal(List.range(4, 6))
      , test("impossible") <|
        \( () ) ->
          toList(slice(-1, -2, smallSample))
            |> Expect.equal([])
      , test("crash") <|
        \( () ) ->
          Array.repeat(33 * 32, 1)
            |> Array.slice(0, 1)
            |> Expect.equal(Array.repeat(1, 1))
      ]
  , describe("Runtime crashes in core") <|
    [ test("magic slice") <|
      \( () ) ->
        let n = 10
        in initialize(4 * n, identity)
          |> slice(n, 4 * n)
          |> slice(n, 3 * n)
          |> slice(n, 2 * n)
          |> slice(n, n)
          |> \(a) -> Expect.equal(a, a)
    , test("magic slice 2") <|
      \( () ) ->
        let ary = fromList <| List.range(0, 32)
        let res = append(slice(1, 32, ary), slice(32 + 1, -1, ary))
        in Expect.equal(res, res)
    , test("magic append") <|
      \( () ) ->
        let res = append
          ( initialize(1, always(1))
          , initialize(Math.toPower(2, 32) - 1 * 32 + 1, \(i) -> i)
          )
        in Expect.equal(res, res)
    ]
  ]
