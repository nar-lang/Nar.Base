module Tests.Oak.Core.Tuple

import Oak.Core.Basics exposing *
import Oak.Core.Math exposing (Int, Float, (+), (-), (*), (/))
import Oak.Core.String exposing (String, (<>))
import Oak.Core.List exposing (List, (|), (++))
import Oak.Core.Tuple exposing *
import Oak.Tests.Test exposing *
import Oak.Tests.Expect

def tests: Test =
  describe("Tuple Tests") <|
    [ describe("first") <|
      [ test("extracts first element") <|
          \( () ) -> Expect.equal(1, first(( 1, 2 )))
      ]
    , describe("second") <|
      [ test("extracts second element") <|
          \( () ) -> Expect.equal(2, second(( 1, 2 )))
      ]
    , describe("mapFirst") <|
      [ test("applies function to first element") <|
          \( () ) -> Expect.equal(( 5, 1 ), mapFirst((*)(5), ( 1, 1 )))
      ]
    , describe("mapSecond") <|
      [ test("applies function to second element") <|
          \( () ) -> Expect.equal(( 1, 5 ), mapSecond((*)(5), ( 1, 1 )))
      ]
    ]
