module Tests.Oak.Core.Basics

def tests: Test =
  describe("Basics") <|
    [ describe("Comparison Tests") <|
      [ test("max") <| \( () ) -> Expect.equal(42, max(32, 42))
      , test("min") <| \( () ) -> Expect.equal(42, min(91, 42))
      , test("5 < 6") <| \( () ) -> Expect.equal(True, 5 < 6)
      , test("6 < 5") <| \( () ) -> Expect.equal(False, 6 < 5)
      , test("6 < 6") <| \( () ) -> Expect.equal(False, 6 < 6)
      , test("5 > 6") <| \( () ) -> Expect.equal(False, 5 > 6)
      , test("6 > 5") <| \( () ) -> Expect.equal(True, 6 > 5)
      , test("6 > 6") <| \( () ) -> Expect.equal(False, 6 > 6)
      , test("5 <= 6") <| \( () ) -> Expect.equal(True, 5 <= 6)
      , test("6 <= 5") <| \( () ) -> Expect.equal(False, 6 <= 5)
      , test("6 <= 6") <| \( () ) -> Expect.equal(True, 6 <= 6)
      , test("compare \"A\"  \"B\"") <| \( () ) -> Expect.equal(LT, compare("A", "B"))
      , test("compare 'f' 'f'") <| \( () ) -> Expect.equal(EQ, compare('f', 'f'))
      , test("compare (1, 2, 3) (0, 1, 2)") <| \( () ) -> Expect.equal(GT, compare( ( 1, 2, 3 ),  ( 0, 1, 2 ) ))
      , test("compare ['a'] ['b']") <| \( () ) -> Expect.equal(LT, compare([ 'a' ], [ 'b' ]))
      , test("set equality") <| \( () ) -> Expect.equal(Set.fromList([ 1, 2 ]), Set.fromList([ 2, 1 ]))
      , test("dict equality") <| \( () ) -> Expect.equal(Dict.fromList([ ( 1, 1 ), ( 2, 2 ) ]), Dict.fromList([ ( 2, 2 ), ( 1, 1 ) ]))
      , test("char equality") <| \( () ) -> Expect.notEqual('0', 'é¥‘')
      , test("array equality") <| \( () ) -> Expect.equal(Array.fromList([ 1, 1, 1, 1 ]), Array.repeat(4, 1))
      ]

    , describe("Boolean Tests") <|
      [ test("False && False") <| \( () ) -> Expect.equal(False, False && False)
      , test("False && True") <| \( () ) -> Expect.equal(False, False && True)
      , test("True && False") <| \( () ) -> Expect.equal(False, True && False)
      , test("True && True") <| \( () ) -> Expect.equal(True, True && True)
      , test("False || False") <| \( () ) -> Expect.equal(False, False || False)
      , test("False || True") <| \( () ) -> Expect.equal(True, False || True)
      , test("True || False") <| \( () ) -> Expect.equal(True, True || False)
      , test("True || True") <| \( () ) -> Expect.equal(True, True || True)
      , test("False ^^ False") <| \( () ) -> Expect.equal(False, False ^^ False)
      , test("False ^^ True") <| \( () ) -> Expect.equal(True, False ^^ True)
      , test("True ^^ False") <| \( () ) -> Expect.equal(True, True ^^ False)
      , test("True ^^ True") <| \( () ) -> Expect.equal(False, True ^^ True)
      , test("not True") <| \( () ) -> Expect.equal(False, not(True))
      , test("not False") <| \( () ) -> Expect.equal(True, not(False))
      ]

      , describe("Higher Order Helpers") <|
        [ test("identity 'c'") <| \( () ) -> Expect.equal('c', identity('c'))
        , test("always 42 ()") <| \( () ) -> Expect.equal(42, always(42, ()))
        , test("<|") <| \( () ) -> Expect.equal(9, identity <| 3 + 6)
        , test("|>") <| \( () ) -> Expect.equal(9, 3 + 6 |> identity)
        , test("<~") <| \( () ) -> Expect.equal(True, not <~ (^^)(True) <| True)
        , describe("~>") <|
            [ test("with xor") <|
                \( () ) ->
                    (True |> (^^)(True) ~> not)
                        |> Expect.equal(True)
            , test("with a record accessor") <|
                \( () ) ->
                    [ { foo = "NaS", bar = "baz" } ]
                        |> List.map(.foo ~> String.reverse)
                        |> Expect.equal([ "SaN" ])
            ]
        ]
    ]
