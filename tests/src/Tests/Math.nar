module Tests.Nar.Core.Math

import Nar.Core.Math exposing *

def tests: Test =
  describe("Math") <|
    [ describe("Operation Tests") <|
      [ test("add float") <| \( () ) -> Expect.equal(159, 155.6 + 3.4)
      , test("add int") <| \( () ) -> Expect.equal(17, round(10) + round(7))
      , test("subtract float") <| \( () ) -> Expect.within(Absolute(0.00000001), -6.3, 1 - 7.3)
      , test("subtract int") <| \( () ) -> Expect.equal(1130, round(9432) - round(8302))
      , test("multiply float") <| \( () ) -> Expect.within(Relative(0.00000001), 432, 96 * 4.5)
      , test("multiply int") <| \( () ) -> Expect.equal(90, round(10) * round(9))
      , test("divide float") <| \( () ) -> Expect.within(Relative(0.00000001), 13.175, 527.0 / 40)
      , test("divide int") <| \( () ) -> Expect.equal(23, 70 / 3)
      , test("negate 42") <| \( () ) -> Expect.equal(-42, neg(42))
      , test("negate -42") <| \( () ) -> Expect.equal(42, neg(-42))
      , test("negate 0") <| \( () ) -> Expect.equal(0, neg(0))
      , test("3 to power 2") <| \( () ) -> Expect.equal(9, 3 |> toPower(2))
      , test("sqrt") <| \( () ) -> Expect.equal(9, sqrt(81))
      , test("7 |> remainderBy 2") <| \( () ) -> Expect.equal(1, 7 |> remainderBy(2))
      , test("-1 |> remainderBy 4") <| \( () ) -> Expect.equal(-1, -1 |> remainderBy(4))
      , test("modBy 2 7") <| \( () ) -> Expect.equal(1, modBy(2, 7))
      , test("modBy 4 -1") <| \( () ) -> Expect.equal(3, modBy(4, -1))
      , test("abs -25") <| \( () ) -> Expect.equal(25, abs(-25))
      , test("abs 76") <| \( () ) -> Expect.equal(76, abs(76))
      , test("logBase 10 100") <| \( () ) -> Expect.equal(2, logBase(10, 100))
      , test("logBase 2 256") <| \( () ) -> Expect.equal(8, logBase(2, 256))
      , test("e") <| \( () ) -> Expect.lessThan(0.01, abs(2.72 - e))
      ]
    , describe("Conversion Tests") <|
      [ test("round 0.6") <| \( () ) -> Expect.equal(1, round(0.6))
      , test("round 0.4") <| \( () ) -> Expect.equal(0, round(0.4))
      , test("round 0.5") <| \( () ) -> Expect.equal(1, round(0.5))
      , test("truncate -2367.9267") <| \( () ) -> Expect.equal(-2367, trunc(-2367.9267))
      , test("floor -2367.9267") <| \( () ) -> Expect.equal(-2368, floor(-2367.9267))
      , test("ceiling 37.2") <| \( () ) -> Expect.equal(38, ceil(37.2))
      , test("toFloat 25") <| \( () ) -> Expect.equal(25.0, toFloat(25))
      ]
    , describe("Miscellaneous Tests") <|
      [ test("isNan (0/0)") <| \( () ) -> Expect.equal(True, isNan(0 / 0))
      , test("isNan (sqrt -1)") <| \( () ) -> Expect.equal(True, isNan(sqrt(-1)))
      , test("isNan (1/0)") <| \( () ) -> Expect.equal(True, isNan(1 / 0))
      , test("isNan (1.0/0)") <| \( () ) -> Expect.equal(False, isNan(1.0 / 0))
      , test("isNan 1") <| \( () ) -> Expect.equal(False, isNan(1))
      , test("isInf (0/0)") <| \( () ) -> Expect.equal(False, isInf(0 / 0))
      , test("isInf (sqrt -1)") <| \( () ) -> Expect.equal(False, isInf(sqrt(-1)))
      , test("isInf (1.0/0)") <| \( () ) -> Expect.equal(True, isInf(1.0 / 0))
      , test("isInf 1") <| \( () ) -> Expect.equal(False, isInf(1))
      ]
    ]
