module Tests.Oak.Core.Result

import Oak.Core.Basics exposing *
import Oak.Core.Math exposing (Int, Float, (+), (-), (*), (/), modBy)
import Oak.Core.String exposing (String, (<>))
import Oak.Core.List exposing (List, (|), (++))
import Oak.Core.Result exposing *
import Oak.Core.Maybe exposing (Maybe)
import Oak.Tests.Test exposing *
import Oak.Tests.Expect


def isEven(n) =
  if modBy(2, n) == 0 then
    Ok(n)
  else
    Err("number is odd")

def toIntResult(s: String): Result[String, Int] =
    select String.toInt(s)
        case Just(i) -> Ok(i)
        case Nothing -> Err("could not convert string '" <> s <> "' to an Int")
    end

def add3(a, b, c) =
    a + b + c

def add4(a, b, c, d) =
    a + b + c + d

def add5(a, b, c, d, e) =
    a + b + c + d + e

def tests: Test =
  describe("Result Tests") <|
    [ describe("map Tests") <|
      [ test("map Ok") <| \( () ) -> Expect.equal(Ok(3), Result.map((+)(1), Ok(2)))
      , test("map Err") <| \( () ) -> Expect.equal(Err("error"), Result.map((+)(1), Err("error")))
      ]
    , describe("mapN Tests") <|
      [ test("map2 Ok") <| \( () ) -> Expect.equal(Ok(3), Result.map2((+), Ok(1), Ok(2)))
      , test("map2 Err") <| \( () ) -> Expect.equal(Err("x"), Result.map2((+), Ok(1), Err("x")))
      , test("map3 Ok") <| \( () ) -> Expect.equal(Ok(6), Result.map3(add3, Ok(1), Ok(2), Ok(3)))
      , test("map3 Err") <| \( () ) -> Expect.equal(Err("x"), Result.map3(add3, Ok(1), Ok(2), Err("x")))
      , test("map4 Ok") <| \( () ) -> Expect.equal(Ok(10), Result.map4(add4, Ok(1), Ok(2), Ok(3), Ok(4)))
      , test("map4 Err") <| \( () ) -> Expect.equal(Err("x"), Result.map4(add4, Ok(1), Ok(2), Ok(3), Err("x")))
      , test("map5 Ok") <| \( () ) -> Expect.equal(Ok(15), Result.map5(add5, Ok(1), Ok(2), Ok(3), Ok(4), Ok(5)))
      , test("map5 Err") <| \( () ) -> Expect.equal(Err("x"), Result.map5(add5, Ok(1), Ok(2), Ok(3), Ok(4), Err("x")))
      ]
    , describe("andThen Tests") <|
      [ test("andThen Ok") <| \( () ) -> Expect.equal(Ok(42), toIntResult("42") |> Result.andThen(isEven))
      , test("andThen first Err") <|
          \( () ) -> Expect.equal
            ( Err("could not convert string '4.2' to an Int")
            , toIntResult("4.2") |> Result.andThen(isEven)
            )
      , test("andThen second Err") <|
          \( () ) -> Expect.equal
            (Err("number is odd")
            , toIntResult("41") |> Result.andThen(isEven)
            )
      ]
    ]
