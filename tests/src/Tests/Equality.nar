module Tests.Nar.Core.Equality

type Different
    = A(String)
    | B(List[Int])

def tests: Test =
  describe("Equality Tests") <|
    [ describe("ADT equality") <|
      [ test("As eq") <| \( () ) -> Expect.equal(True, A("a") == A("a"))
      , test("Bs eq") <| \( () ) -> Expect.equal(True, B([ 1 ]) == B([ 1 ]))
      , test("A left neq") <| \( () ) -> Expect.equal(True, A("a") /= B([ 1 ]))
      , test("A right neq") <| \( () ) -> Expect.equal(True, B([ 1 ]) /= A("a"))
      ]
    , describe("Record equality") <|
      [ test("empty same") <| \( () ) -> Expect.equal(True, {} == {})
      , test("ctor same") <| \( () ) -> Expect.equal(True, { field = Just(3) } == { field = Just(3) })
      , test("ctor same, special case") <| \( () ) -> Expect.equal(True, { ctor = Just(3) } == { ctor = Just(3) })
      , test("ctor diff") <| \( () ) -> Expect.equal(True, { field = Just(3) } /= { field = Nothing })
      , test("ctor diff, special case") <| \( () ) -> Expect.equal(True, { ctor = Just(3) } /= { ctor = Nothing })
      , test("order independent") <| \( () ) -> Expect.equal(True, { a = 1, b = 2 } == { b = 2, a = 1 })
      , test("full intersection") <| \( () ) -> Expect.equal(True, { a = 1, b = 2 } /= { a = 1, b = 2, c = 3 })
      ]
    /*,describe("List equality") <|
      [ fuzz2 (Fuzz.intRange 100 10000) (Fuzz.intRange 100 10000) "Simple comparison" <|
          \size1 size2 ->
              Expect.equal
                  (size1 == size2)
                  (List.range 0 size1 == List.range 0 size2)
      ]*/
    ]
