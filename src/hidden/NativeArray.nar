module Nar.Base.NativeArray

import Nar.Base.Basics exposing *
import Nar.Base.Math exposing (Int, Float, (+), (-), (*), (/))
import Nar.Base.String exposing (String, (<>))
import Nar.Base.List exposing (List, (|), (++))

alias native NativeArray[a]

def native empty: NativeArray[a]

def native singleton(item: a): NativeArray[a]

def native length(arr: NativeArray[a]): Int

def native initialize(n: Int, offset: Int, fn: (Int): a): NativeArray[a]

def native initializeFromList(n: Int, ls: List[a]): ( NativeArray[a], List[a] )

def native unsafeGet(index: Int, array: NativeArray[a]):  a

def native unsafeSet(index: Int, value: a, array: NativeArray[a]): NativeArray[a]

def native push(value: a, array: NativeArray[a]): NativeArray[a]

def native foldl(f: (a,b):b, acc: b, array: NativeArray[a]): b

def native foldr(f: (a,b):b, acc: b, array: NativeArray[a]): b

def native map(f: (a):b, array: NativeArray[a]): NativeArray[b]

def native indexedMap(f: (Int, a):b, offset: Int, array: NativeArray[a]): NativeArray[b]

def native slice(start: Int, end: Int, array: NativeArray[a]): NativeArray[a]

def native appendN(n: Int, from: NativeArray[a], to: NativeArray[a]): NativeArray[a]
