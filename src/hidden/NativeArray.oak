module Oak.Core.NativeArray

import Oak.Core.Basics exposing *
import Oak.Core.Math exposing (Int, Float, (+), (-), (*), (/))
import Oak.Core.String exposing (String, (<>))
import Oak.Core.List exposing (List, (|), (++))

alias extern NativeArray[a]

def extern empty: NativeArray[a]

def extern singleton(item: a): NativeArray[a]

def extern length(arr: NativeArray[a]): Int

def extern initialize(n: Int, offset: Int, fn: (Int): a): NativeArray[a]

def extern initializeFromList(n: Int, ls: List[a]): ( NativeArray[a], List[a] )

def extern unsafeGet(index: Int, array: NativeArray[a]):  a

def extern unsafeSet(index: Int, value: a, array: NativeArray[a]): NativeArray[a]

def extern push(value: a, array: NativeArray[a]): NativeArray[a]

def extern foldl(f: (a,b):b, acc: b, array: NativeArray[a]): b

def extern foldr(f: (a,b):b, acc: b, array: NativeArray[a]): b

def extern map(f: (a):b, array: NativeArray[a]): NativeArray[b]

def extern indexedMap(f: (Int, a):b, offset: Int, array: NativeArray[a]): NativeArray[b]

def extern slice(start: Int, end: Int, array: NativeArray[a]): NativeArray[a]

def extern appendN(n: Int, from: NativeArray[a], to: NativeArray[a]): NativeArray[a]
