module Oak.Core.List

import Oak.Core.Basics exposing *
import Oak.Core.Math exposing *
import Oak.Core.Maybe exposing (Maybe)

infix (++): (right 5) = append
infix (|): (right 5) = cons

alias extern List[a]

def singleton(value: a): List[a] =
  [value]

def repeat(n: Int, value: a): List[a] =
  repeatHelp([], n, value)

def hidden repeatHelp(result: List[a], n: Int, value: a): List[a] =
  if n <= 0 then
    result
  else
    repeatHelp(cons(value, result), n-1, value)

def range(lo: Int,  hi: Int): List[Int] =
  rangeHelp(lo, hi, [])

def hidden rangeHelp(lo: Int, hi: Int, list: List[Int]): List[Int] =
  if lo <= hi then
    rangeHelp(lo, hi-1, cons(hi, list))
  else
    list

def extern cons(head: a, tail: List[a]): List[a]

def map(f: (a):b, xs: List[a]): List[b] =
  foldr(\(x, acc) -> cons(f(x), acc), [], xs)

def indexedMap(f: (Int, a):b, xs: List[a]): List[b] =
  map2(f, range(0, length(xs) - 1), xs)

def foldl(func: (a, b):b, acc: b, list: List[a]): b =
  select list
    case [] ->
      acc
    case x | xs ->
      foldl(func, func(x, acc), xs)
  end

def foldr(fn: (a, b):b, acc: b, ls: List[a]): b =
    foldrHelper(fn, acc, 0, ls)

def hidden foldrHelper(fn: (a, b):b, acc: b, ctr: Int, ls: List[a]): b =
  select ls
    case [] ->
      acc
    case a | r1 ->
      select r1
        case [] ->
          fn(a, acc)
        case b | r2 ->
          select r2
            case [] ->
              fn(a, fn(b, acc))
            case c | r3 ->
              select r3
                case [] ->
                  fn(a, fn(b, fn(c, acc)))
                case d | r4 ->
                  let
                    res: b =
                      if ctr > 500 then
                        foldl(fn, acc, reverse(r4))
                      else
                        foldrHelper(fn, acc, ctr + 1, r4)
                  in
                    fn(a, fn(b, fn(c, fn(d, res))))
              end
          end
      end
  end

def filter(isGood: (a):Bool, list: List[a]): List[a] =
  foldr(\(x, xs) -> if isGood(x) then cons(x, xs) else xs, [], list)

def filterMap(f: (a):Maybe[b], xs: List[a]): List[b] =
  foldr(maybeCons(f), [], xs)

def maybeCons(f: (a):Maybe[b], mx: a, xs: List[b]): List[b] =
  select f(mx)
    case Just(x) ->
      cons(x, xs)
    case Nothing ->
      xs
  end

def length(xs: List[a]): Int =
  foldl(\(_, c) -> c + 1, 0, xs)

def reverse(list: List[a]): List[a] =
  foldl(cons, [], list)

def member(x: eq, xs: List[eq]): Bool =
  any(\(a) -> a == x, xs)

def all(isOkay: (a):Bool, list: List[a]): Bool =
  not(any(not <~ isOkay, list))

def any(isOkay: (a):Bool, list: List[a]): Bool =
  select list
    case [] ->
      False
    case x | xs ->
      // note: (isOkay x || any isOkay xs) would not get tail call optimisation
      if isOkay(x) then
        True
      else
        any(isOkay, xs)
  end

def maximum(list: List[cmp]): Maybe[cmp] =
  select list
    case x | xs ->
      Just(foldl(max, x, xs))
    case _ ->
      Nothing
  end

def minimum(list: List[cmp]): Maybe[cmp] =
  select list
    case x | xs ->
      Just(foldl(min, x, xs))
    case _ ->
      Nothing
  end

def sum(numbers: List[number]): number =
  foldl((+), 0, numbers)

def product(numbers: List[number]): number =
  foldl((*), 1, numbers)

def append(xs: List[a], ys: List[a]): List[a] =
  select ys
    case [] ->
      xs
    case _ ->
      foldr(cons, ys, xs)
  end

def concat(lists: List[List[a]]): List[a] =
  foldr(append, [], lists)

def concatMap(f: (a):List[b], list: List[a]): List[b] =
  concat(map(f, list))

def intersperse(sep: a, xs: List[a]): List[a] =
  select xs
    case [] ->
      []
    case hd | tl ->
      let step(x, rest) = cons(sep, cons(x, rest))
      let spersed = foldr(step, [], tl)
      in
        cons(hd, spersed)
  end

def extern map2(f: (a, b):r, a: List[a], b: List[b]): List[r]

def extern map3(f: (a, b, c):r, a: List[a], b: List[b], c: List[c]): List[r]

def extern map4(f: (a, b, c, d):r, a: List[a], b: List[b], c: List[c], d: List[d]): List[r]

def extern map5(f: (a, b, c, d, e):r, a: List[a], b: List[b], c: List[c], d: List[d], e: List[e]): List[r]

def sort(xs: List[a]): List[a] =
  sortBy(identity, xs)

def extern sortBy(f: (a):b, xs: List[a]): List[a]

def extern sortWith(f: (a, a):Order, xs: List[a]): List[a]

def isEmpty(xs: List[a]): Bool =
  select xs
    case [] -> True
    case _ -> False
  end

def head(list: List[a]): Maybe[a] =
  select list
    case x | _ -> Just(x)
    case [] -> Nothing
  end

def tail(list: List[a]): Maybe[List[a]] =
  select list
    case x | xs -> Just(xs)
    case [] -> Nothing
  end

def take(n: Int, list: List[a]): List[a] =
  takeFast(0, n, list)

def hidden takeFast(ctr: Int, n: Int, list: List[a]): List[a] =
  if n <= 0 then
    []
  else
    select ( n, list )
      case ( _, [] ) ->
        list
      case ( 1, x | _ ) ->
        [ x ]
      case ( 2, x | y | _ ) ->
        [ x, y ]
      case ( 3, x | y | z | _ ) ->
        [ x, y, z ]
      case ( _, x | y | z | w | tl ) ->
        if ctr > 1000 then
          cons(x, cons(y, cons(z, cons(w, takeTailRec(n - 4, tl)))))
        else
          cons(x, cons(y, cons(z, cons(w, takeFast(ctr + 1, n - 4, tl)))))
      case _ ->
        list
    end

def hidden takeTailRec(n: Int, list: List[a]): List[a] =
  reverse(takeReverse(n, list, []))

def hidden takeReverse(n: Int, list: List[a], kept: List[a]): List[a] =
  if n <= 0 then
    kept
  else
    select list
      case [] ->
        kept
      case x | xs ->
        takeReverse(n - 1, xs, cons(x, kept))
    end

def drop(n: Int, list: List[a]): List[a] =
  if n <= 0 then
    list
  else
    select list
      case [] ->
        list
      case x | xs ->
        drop(n-1, xs)
    end

def partition(pred: (a): Bool, list: List[a]): ( List[a], List[a] ) =
  let
    step(x, (trues, falses) ) =
      if pred(x) then
        ( cons( x, trues), falses )
      else
        ( trues, cons(x, falses) )
  in
    foldr(step, ( [], [] ), list)

def unzip(pairs: List[( a, b )]): ( List[a], List[b] ) =
  let
    step(( x, y ), ( xs, ys )) =
      ( cons(x, xs), cons(y, ys) )
  in
    foldr(step, ( [], [] ), pairs)
