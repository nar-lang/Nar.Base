module Char

import Basics exposing (Bool, Int, (&&), (||), (>=), (<=))

type Char = extern

def isUpper: (char: Char -> Bool) =
  let code: Int = toCode char
  in code <= 0x5A && 0x41 <= code

def isLower : (char: Char -> Bool) =
  let code: Int = toCode char
  in 0x61 <= code && code <= 0x7A

def isAlpha: (char: Char -> Bool) =
  isLower char || isUpper char

def isAlphaNum: (char: Char -> Bool) =
  isLower char || isUpper char || isDigit char

def isDigit: (char: Char -> Bool) =
  let code: Int = toCode char
  in code <= 0x39 && 0x30 <= code

def isOctDigit: (char: Char -> Bool) =
  let code: Int = toCode char
  in code <= 0x37 && 0x30 <= code

def isHexDigit: (char: Char -> Bool) =
  let code: Int = toCode char
  in
    (0x30 <= code && code <= 0x39)
    || (0x41 <= code && code <= 0x46)
    || (0x61 <= code && code <= 0x66)


def toUpper : (Char -> Char) = extern

def toLower : (Char -> Char) = extern

def toCode : (Char -> Int) = extern

def fromCode : (Int -> Char) = extern
