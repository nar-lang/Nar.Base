module Oak.Core.Maybe

type Maybe[a]
  = Just(a)
  | Nothing

def withDefault(default: a, maybe: Maybe[a]): a =
  select maybe
    case Just(value) -> value
    case Nothing -> default
  end

def map(f: (a):value, ma: Maybe[a]): Maybe[value] =
  select ma
    case Nothing -> Nothing
    case Just(va) -> Just(f(va))
  end

def map2(f: (a,b):value, ma: Maybe[a], mb: Maybe[b]): Maybe[value] =
  select ma
    case Nothing -> Nothing
    case Just(va) ->
      select mb
        case Nothing -> Nothing
        case Just(vb) -> Just(f(va, vb))
      end
  end

def map3(f: (a,b,c):value, ma: Maybe[a], mb:Maybe[b], mc:Maybe[c]): Maybe[value] =
  select ma
    case Nothing -> Nothing
    case Just(va) ->
      select mb
        case Nothing -> Nothing
        case Just(vb) ->
          select mc
            case Nothing -> Nothing
            case Just(vc) -> Just(f(va, vb, vc))
          end
      end
  end

def map4(f: (a,b,c,d):value, ma: Maybe[a], mb:Maybe[b], mc:Maybe[c], md:Maybe[d]): Maybe[value] =
  select ma
    case Nothing -> Nothing
    case Just(va) ->
      select mb
        case Nothing -> Nothing
        case Just(vb) ->
          select mc
            case Nothing -> Nothing
            case Just(vc) ->
              select md
                case Nothing -> Nothing
                case Just(vd) -> Just(f(va, vb, vc, vd))
              end
          end
      end
  end

def map5(f: (a,b,c,d,e):value, ma: Maybe[a], mb:Maybe[b], mc:Maybe[c], md:Maybe[d], me:Maybe[e]): Maybe[value] =
  select ma
    case Nothing -> Nothing
    case Just(va) ->
      select mb
        case Nothing -> Nothing
        case Just(vb) ->
          select mc
            case Nothing -> Nothing
            case Just(vc) ->
              select md
                case Nothing -> Nothing
                case Just(vd) ->
                  select me
                    case Nothing -> Nothing
                    case Just(ve) -> Just(f(va, vb, vc, vd, ve))
                  end
              end
          end
      end
  end

def andThen(callback: (a):Maybe[b], maybeValue: Maybe[a]): Maybe[b] =
  select maybeValue
    case Just(value) -> callback(value)
    case Nothing -> Nothing
  end

def isJust(maybe: Maybe[a]): Bool =
  select maybe
    case Just(_) ->
      True
    case Nothing ->
      False
  end

def destruct(default: b, func: (a):b, maybe: Maybe[a]): b =
  select maybe
    case Just(x) ->
      func(x)
    case Nothing ->
      default
  end
