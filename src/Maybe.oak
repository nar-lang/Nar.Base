module Maybe

import Basics exposing (Bool)

type Maybe[A] =
  | Just A
  | Nothing

def withDefault[A]: (default: A -> maybe: Maybe[A] -> A) =
  select maybe
    case Just value -> value
    case Nothing -> default

def map[A, Value]: (f: (A->Value) -> ma: Maybe[A] -> Maybe[Value]) =
  select ma
    case Nothing -> Nothing
    case Just va -> Just (f va)

def map2[A, B, Value]: (f: (A->B->Value) -> ma: Maybe[A] -> mb:Maybe[B] -> Maybe[Value]) =
  select ma
    case Nothing -> Nothing
    case Just va ->
      select mb
        case Nothing -> Nothing
        case Just vb -> Just (f va vb)

def map3[A, B, C, Value]: (f: (A->B->C->Value) -> ma: Maybe[A] -> mb:Maybe[B] -> mc:Maybe[C] -> Maybe[Value]) =
  select ma
    case Nothing -> Nothing
    case Just va ->
      select mb
        case Nothing -> Nothing
        case Just vb ->
          select mc
            case Nothing -> Nothing
            case Just vc -> Just (f va vb vc)

def map4[A, B, C, D, Value]: (
    f: (A->B->C->D->Value)
    -> ma: Maybe[A]
    -> mb:Maybe[B]
    -> mc:Maybe[C]
    -> md:Maybe[D]
    -> Maybe[Value]) =
  select ma
    case Nothing -> Nothing
    case Just va ->
      select mb
        case Nothing -> Nothing
        case Just vb ->
          select mc
            case Nothing -> Nothing
            case Just vc ->
              select md
                case Nothing -> Nothing
                case Just vd -> Just (f va vb vc vd)

def andThen[A, B]: (callback:(A->Maybe[B]) -> maybeValue: Maybe[A] -> Maybe[B]) =
  select maybeValue
    case Just value -> callback value
    case Nothing -> Nothing

def isJust[A]: (maybe: Maybe[A] -> Bool) =
  select maybe
    case Just _ ->
      True
    case Nothing ->
      False

def destruct[A, B] : (default: B -> func: (A -> B) -> maybe: Maybe[A] -> B) =
  select maybe
    case Just x ->
      func x
    case Nothing ->
      default
