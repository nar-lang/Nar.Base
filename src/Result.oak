module Result

import Basics exposing (Bool)
import Maybe exposing (Maybe)

type Result[Error, Value] =
    | Ok Value
    | Err Error

def withDefault[X, A]: (default: A -> result: Result[X, A] -> A) =
  select result
    case Ok v -> v
    case Err _ -> default

def map[X, A, Value]: (func: (A -> Value) -> ra: Result[X, A] -> Result[X, Value]) =
  select ra
    case Ok a -> Ok (func a)
    case Err e -> Err e

def map2[X, A, B, Value]: (func: (A -> B -> Value) -> ra: Result[X, A] -> rb: Result[X, B] -> Result[X, Value]) =
  select ra
    case Err e -> Err e
    case Ok a ->
      select rb
        case Err e -> Err e
        case Ok b -> Ok (func a b)

def map3[X, A, B, C, Value] : (
    func: (A -> B -> C -> Value) ->
    ra: Result[X, A] ->
    rb: Result[X, B] ->
    rc: Result[X, C] ->
    Result[X, Value]) =
  select ra
    case Err e -> Err e
    case Ok a ->
      select rb
        case Err e -> Err e
        case Ok b ->
          select rc
            case Err e -> Err e
            case Ok c -> Ok (func a b c)

def map4[X, A, B, C, D, Value]: (
    func: (A -> B -> C -> D -> Value) ->
    ra: Result[X, A] ->
    rb: Result[X, B] ->
    rc: Result[X, C] ->
    rd: Result[X, D] ->
    Result[X, Value]) =
  select ra
    case Err e -> Err e
    case Ok a ->
      select rb
        case Err e -> Err e
        case Ok b ->
          select rc
            case Err e -> Err e
            case Ok c ->
              select rd
                case Err e -> Err e
                case Ok d -> Ok (func a b c d)


def map5[X, A, B, C, D, E, Value]: (
    func: (A -> B -> C -> D -> E -> Value) ->
    ra: Result[X, A] ->
    rb: Result[X, B] ->
    rc: Result[X, C] ->
    rd: Result[X, D] ->
    re: Result[X, E] ->
    Result[X, Value]) =
  select ra
    case Err n -> Err n
    case Ok a ->
      select rb
        case Err n -> Err n
        case Ok b ->
          select rc
            case Err n -> Err n
            case Ok c ->
              select rd
                case Err n -> Err n
                case Ok d ->
                  select re
                    case Err n -> Err n
                    case Ok e -> Ok (func a b c d e)

def andThen[X, A, B]: (callback: (A -> Result[X, B]) -> result: Result[X,A] -> Result[X, B]) =
  select result
    case Ok value -> callback value
    case Err msg -> Err msg

def mapError[X, Y, A]: (f: (X -> Y) -> result: Result[X, A] -> Result[Y, A]) =
  select result
    case Ok v -> Ok v
    case Err e -> Err (f e)

def toMaybe[X, A]: (result: Result[X, A] -> Maybe[A]) =
  select result
    case Ok v -> Just v
    case Err _ -> Nothing

def fromMaybe[X, A]: (err: X -> maybe: Maybe[A] -> Result[X, A]) =
  select maybe
    case Just v -> Ok v
    case Nothing -> Err err

def isOk[X, A]: (result: Result[X, A] -> Bool) =
  select result
    case Ok _ -> True
    case Err _ -> False
