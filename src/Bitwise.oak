module Oak.Core.Bitwise

import Oak.Core.Basics exposing (Int)

infix (<<): (left 5) = shiftLeft
infix (>>): (left 5) = shiftRight
infix (|) : (left 6) = or
infix (^) : (left 6) = xor
infix (&) : (left 7) = and

def extern and(x: Int, y: Int): Int

def extern or(x: Int, y: Int): Int

def extern xor(x: Int, y: Int): Int

def extern complement(x: Int): Int

def extern shiftLeftBy(x: Int, y: Int): Int

def extern shiftRightBy(x: Int, y: Int): Int

def hidden shiftLeft(x: Int, y: Int) =
  shiftLeftBy(y, x)

def hidden shiftRight(x: Int, y: Int) =
  shiftRightBy(y, x)
