module Oak.Core.Bitwise

infix (>>>): (left 5) = shiftRightZf
infix (<<): (left 5) = shiftLeft
infix (>>): (left 5) = shiftRight
infix (%) : (left 6) = or
infix (^) : (left 6) = xor
infix (&) : (left 7) = and

def native and(x: Int, y: Int): Int

def native or(x: Int, y: Int): Int

def native xor(x: Int, y: Int): Int

def native complement(x: Int): Int

def native shiftLeftBy(x: Int, y: Int): Int

def native shiftRightBy(x: Int, y: Int): Int

def native shiftRightZfBy(x: Int, y: Int): Int

def hidden shiftLeft(x: Int, y: Int) =
  shiftLeftBy(y, x)

def hidden shiftRight(x: Int, y: Int) =
  shiftRightBy(y, x)

def hidden shiftRightZf(x: Int, y: Int) =
  shiftRightZfBy(y, x)
