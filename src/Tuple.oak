module Tuple

def pair[A, B] : (x: A -> y: B -> {A, B}) =
  {x, y}

def first[A, B] : ({x, _}: {A, B} -> A) =
  x

def second[A, B] : ({_, y}: {A, B} -> B) =
  y

def mapFirst[A, B, X] : (func: (A -> X) -> {p, q}: {A, B} -> {X, B}) =
  {func p, q}

def mapSecond[A, B, Y] : (func: (B -> Y) -> {p, q}: {A, B} -> {A, Y}) =
  {p, func q}

def mapBoth[A, B, X, Y] : (funcA: (A -> X) -> funcB: (B -> Y) -> {p, q}: {A, B} -> {X, Y}) =
  { funcA p, funcB q }
