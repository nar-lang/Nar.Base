module Nar.Base.String

infix (<>): (right 5) = append

alias native String

def isEmpty(string: String): Bool =
  string == ""

def native length(s: String): Int

def native reverse(s: String): String

def repeat(n: Int, chunk: String): String =
  repeatHelp(n, chunk, "")

def hidden repeatHelp(n: Int, chunk: String, result: String): String =
  if n <= 0 then
    result
  else
    repeatHelp(Bitwise.shiftRightBy(1, n), chunk <> chunk) <|
      if Bitwise.and(n, 1) == 0 then result else result <> chunk

def replace(before: String, after: String, string: String): String =
  join(after, split(before, string))


// BUILDING AND SPLITTING

def native append(a: String, b: String): String

def concat(strings: List[String]): String =
  join("", strings)

def native split(sep: String, string: String): List[String]

def native join(sep: String, strings: List[String]): String

def native words(string: String): List[String]

def native lines(string: String): List[String]

// SUBSTRINGS

def native slice(begin: Int, end: Int, s: String): String

def left(n: Int, string: String): String =
  if n < 1 then
    ""
  else
    slice (0, n, string)

def right(n: Int, string: String): String =
  if n < 1 then
    ""
  else
    slice(-n, length(string), string)

def dropLeft(n: Int, string: String): String =
  if n < 1 then
    string
  else
    slice(n, length(string), string)

def dropRight(n: Int, string: String): String =
  if n < 1 then
    string
  else
    slice(0, -n, string)

// DETECT SUBSTRINGS

def native contains(sub: String, string: String): Bool

def native startsWith(sub: String, string: String): Bool

def native endsWith(sub: String, string: String): Bool

def native indices(sub: String, string: String): List[Int]

// FORMATTING

def native toUpper(s: String): String

def native toLower(s: String): String

def pad(n: Int, char: Char, string: String): String =
  let
    half = Math.toFloat(n - length(string)) / 2.0
  in
    repeat(ceil(half), fromChar(char) <> string <> repeat(floor(half), fromChar(char)))

def padLeft(n: Int, char: Char, string: String): String =
  repeat(n - length(string), fromChar(char) <> string)

def padRight(n: Int, char: Char, string: String): String =
  string <> repeat(n - length(string), fromChar(char))

def native trim(s: String): String

def native trimLeft(s: String): String

def native trimRight(s: String): String

// INT CONVERSIONS

def native toInt(s: String): Maybe[Int]

def native fromInt(n: Int): String

// FLOAT CONVERSIONS

def native toFloat(s: String): Maybe[Float]

def native fromFloat(n: Float): String

// LIST CONVERSIONS

def toList(string: String): List[Char] =
  foldr((|), [], string)

def native fromList(chars: List[Char]): String

// CHAR CONVERSIONS

def fromChar(char: Char): String =
  cons(char, "")

def native cons(c: Char, s: String): String

def native uncons(s: String): Maybe[( Char, String )]

// HIGHER-ORDER FUNCTIONS

def native map(f: (Char):Char, s: String): String

def native filter(f: (Char): Bool, s: String): String

def native foldl(f: (Char,b):b, acc: b, s: String): b

def native foldr(f: (Char,b):b, acc: b, s: String): b

def native any(f: (Char): Bool, s: String): Bool

def native all(f: (Char): Bool, s: String): Bool
