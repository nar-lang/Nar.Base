module Oak.Core.Dict

import Oak.Core.Basics exposing *
import Oak.Core.Math exposing ((+),(-),(*),(/),Int)
import Oak.Core.Maybe exposing *
import Oak.Core.List exposing *

type hidden NColor
    = Red
    | Black

type Dict[k,v]
    = hidden RBNode(color: NColor, key: k, value: v, left: Dict[k,v], right: Dict[k,v])
    | hidden RBEmpty

def empty: Dict[k,v] =
  RBEmpty

def get(targetKey: cmp, dict: Dict[cmp,v]): Maybe[v] =
  select dict
    case RBEmpty ->
      Nothing
    case RBNode(_, key, value, left, right) ->
      select compare(targetKey, key)
        case LT ->
          get(targetKey, left)
        case EQ ->
          Just(value)
        case GT ->
          get(targetKey, right)
      end
  end

def member(key: cmp, dict: Dict[cmp,v]): Bool =
  select get(key, dict)
    case Just(_) ->
      True
    case Nothing ->
      False
  end

def size(dict: Dict[k,v]): Int =
  sizeHelp(0, dict)

def hidden sizeHelp(n: Int, dict: Dict[k,v]): Int =
  select dict
    case RBEmpty ->
      n
    case RBNode(_, _, _, left, right) ->
      sizeHelp(sizeHelp(n+1, right), left)
  end

def isEmpty(dict: Dict[k,v]): Bool =
  select dict
    case RBEmpty ->
      True
    case RBNode(_,_,_,_,_) ->
      False
  end

def insert(key: cmp, value: v, dict: Dict[cmp,v]): Dict[cmp,v] =
  // Root node is always Black
  select insertHelp(key, value, dict)
    case RBNode(Red, k, v, l, r) ->
      RBNode(Black, k, v, l, r)
    case x ->
      x
  end


def hidden insertHelp(key: cmp, value: v, dict: Dict[k,v]): Dict[k,v] =
  select dict
    case RBEmpty ->
      // New nodes are always red. If it violates the rules, it will be fixed
      // when balancing.
      RBNode(Red, key, value, RBEmpty, RBEmpty)
    case RBNode(nColor, nKey, nValue, nLeft, nRight) ->
      select compare(key, nKey)
        case LT ->
          balance(nColor, nKey, nValue, insertHelp(key, value, nLeft), nRight)
        case EQ ->
          RBNode(nColor, nKey, value, nLeft, nRight)
        case GT ->
          balance(nColor, nKey, nValue, nLeft, insertHelp(key, value, nRight))
      end
  end

def hidden balance(color: NColor, key: k, value: v, left: Dict[k,v], right: Dict[k,v]): Dict[k,v] =
  select right
    case RBNode(Red, rK, rV, rLeft, rRight) ->
      select left
        case RBNode(Red, lK, lV, lLeft, lRight) ->
          RBNode(
            Red,
            key,
            value,
            RBNode(Black, lK, lV, lLeft, lRight),
            RBNode(Black, rK, rV, rLeft, rRight)
          )
        case _ ->
          RBNode(color, rK, rV, RBNode(Red, key, value, left, rLeft), rRight)
      end
    case _ ->
      select left
        case RBNode(Red, lK, lV, RBNode(Red, llK, llV, llLeft, llRight), lRight) ->
          RBNode(
            Red,
            lK,
            lV,
            RBNode(Black, llK, llV, llLeft, llRight),
            RBNode(Black, key, value, lRight, right)
          )
        case _ ->
          RBNode(color, key, value, left, right)
      end
  end

def remove(key: k, dict: Dict[k,v]): Dict[k,v] =
  // Root node is always Black
  select removeHelp(key, dict)
    case RBNode(Red, k, v, l, r) ->
      RBNode(Black, k, v, l, r)
    case x ->
      x
  end

def hidden removeHelp(targetKey: k, dict: Dict[k,v]): Dict[k,v] =
  select dict
    case RBEmpty ->
      RBEmpty
    case RBNode(color, key, value, left, right) ->
      if targetKey < key then
        select left
          case RBNode(Black, _, _, lLeft, _) ->
            select lLeft
              case RBNode(Red, _, _, _, _) ->
                RBNode(color, key, value, removeHelp(targetKey, left), right)
              case _ ->
                select moveRedLeft(dict)
                  case RBNode(nColor, nKey, nValue, nLeft, nRight) ->
                    balance(nColor, nKey, nValue, removeHelp(targetKey, nLeft), nRight)
                  case RBEmpty ->
                    RBEmpty
                end
            end
          case _ ->
            RBNode(color, key, value, removeHelp(targetKey, left), right)
        end
      else
        removeHelpEQGT(targetKey, removeHelpPrepEQGT(targetKey, dict, color, key, value, left, right))
  end

def hidden removeHelpPrepEQGT(
    targetKey: k, dict: Dict[k,v], color: NColor,
    key: k, value: v,
    left: Dict[k,v], right: Dict[k,v]
): Dict[k,v] =
  select left
    case RBNode(Red, lK, lV, lLeft, lRight) ->
      RBNode(color, lK, lV, lLeft, RBNode(Red, key, value, lRight, right))
    case _ ->
      select right
        case RBNode(Black, _, _, RBNode(Black, _, _, _, _), _) ->
          moveRedRight(dict)
        case RBNode(Black, _, _, RBEmpty, _) ->
          moveRedRight(dict)
        case _ ->
          dict
      end
  end

def hidden removeHelpEQGT(targetKey: cmp, dict: Dict[cmp,v]): Dict[cmp,v] =
  select dict
    case RBNode(color, key, value, left, right) ->
      if targetKey == key then
        select getMin(right)
          case RBNode(_, minKey, minValue, _, _) ->
            balance(color, minKey, minValue, left, removeMin(right))
          case RBEmpty ->
            RBEmpty
        end
      else
        balance(color, key, value, left, removeHelp(targetKey, right))
    case RBEmpty ->
      RBEmpty
  end

def hidden getMin(dict: Dict[k,v]): Dict[k,v] =
  select dict
    case RBNode(_, _, _, RBNode(_, _, _, _, _) as left, _) ->
      getMin(left)
    case _ ->
      dict
  end

def hidden removeMin(dict: Dict[k,v]): Dict[k,v] =
  select dict
    case RBNode(color, key, value, RBNode(lColor, _, _, lLeft, _) as left, right) ->
      select lColor
        case Black ->
          select lLeft
            case RBNode(Red, _, _, _, _) ->
              RBNode(color, key, value, removeMin(left), right)
            case _ ->
              select moveRedLeft(dict)
                case RBNode(nColor, nKey, nValue, nLeft, nRight) ->
                  balance(nColor, nKey, nValue, removeMin(nLeft), nRight)
                case RBEmpty ->
                  RBEmpty
              end
          end
        case _ ->
          RBNode(color, key, value, removeMin(left), right)
      end
    case _ ->
      RBEmpty
  end

def hidden moveRedLeft(dict: Dict[k,v]): Dict[k,v] =
  select dict
    case RBNode(
        clr,
        k,
        v,
        RBNode(lClr, lK, lV, lLeft, lRight),
        RBNode(rClr, rK, rV, RBNode(Red, rlK, rlV, rlL, rlR) as rLeft, rRight)
    ) ->
      RBNode(
        Red,
        rlK,
        rlV,
        RBNode(Black, k, v, RBNode(Red, lK, lV, lLeft, lRight), rlL),
        RBNode(Black, rK, rV, rlR, rRight)
      )
    case RBNode(
        clr,
        k,
        v,
        RBNode(lClr, lK, lV, lLeft, lRight),
        RBNode(rClr, rK, rV, rLeft, rRight)
    ) ->
      select clr
        case Black ->
          RBNode(
            Black,
            k,
            v,
            RBNode(Red, lK, lV, lLeft, lRight),
            RBNode(Red, rK, rV, rLeft, rRight)
          )
        case Red ->
          RBNode(
            Black,
            k,
            v,
            RBNode(Red, lK, lV, lLeft, lRight),
            RBNode(Red, rK, rV, rLeft, rRight)
          )
      end
    case _ ->
      dict
  end

def hidden moveRedRight(dict: Dict[k,v]): Dict[k,v] =
  select dict
    case RBNode(
      clr,
      k,
      v,
      RBNode(lClr, lK, lV, RBNode(Red, llK, llV, llLeft, llRight), lRight),
      RBNode(rClr, rK, rV, rLeft, rRight)
    ) ->
      RBNode(
        Red,
        lK,
        lV,
        RBNode(Black, llK, llV, llLeft, llRight),
        RBNode(Black, k, v, lRight, RBNode(Red, rK, rV, rLeft, rRight) )
      )
    case RBNode(
      clr,
      k,
      v,
      RBNode(lClr, lK, lV, lLeft, lRight),
      RBNode(rClr, rK, rV, rLeft, rRight)
    ) ->
      select clr
        case Black ->
          RBNode(
            Black,
            k,
            v,
            RBNode(Red, lK, lV, lLeft, lRight),
            RBNode(Red, rK, rV, rLeft, rRight)
          )
        case Red ->
          RBNode(
            Black,
            k,
            v,
            RBNode(Red, lK, lV, lLeft, lRight),
            RBNode(Red, rK, rV, rLeft, rRight)
          )
      end
    case _ ->
      dict
  end

def update(targetKey: k, alter:(Maybe[v]):Maybe[v], dict: Dict[k,v]): Dict[k,v] =
  select alter(get(targetKey,dict))
    case Just(value) ->
      insert(targetKey, value, dict)
    case Nothing ->
      remove(targetKey, dict)
  end

def singleton(key: cmp, value: v): Dict[k,v] =
  // Root node is always Black
  RBNode(Black, key, value, RBEmpty, RBEmpty)

def union(t1: Dict[cmp,v], t2: Dict[cmp,v]): Dict[cmp,v] =
  foldl(insert, t2, t1)

def intersect(t1: Dict[cmp,v], t2: Dict[cmp,v]): Dict[cmp,v] =
  filter(\(k, _) -> member(k, t2), t1)

def diff(t1: Dict[k,a], t2: Dict[k,b]): Dict[k,a] =
  foldl(\(k, _, t) -> remove(k, t), t1, t2)

def merge(
    leftStep:(k, a, r): r, bothStep:(k, a, b, r): r, rightStep:(k, b, r) : r,
    leftDict: Dict[k,a], rightDict: Dict[k,b], initialResult: r
): r =
  let stepState(rKey, rValue, ( list, result )) =
    select list
      case [] ->
        (list, rightStep(rKey, rValue, result))
      case (lKey, lValue) | rest ->
        if lKey < rKey then
          stepState(rKey, rValue, (rest, leftStep(lKey, lValue, result)))
        else if lKey > rKey then
          (list, rightStep(rKey, rValue, result))
        else
          (rest, bothStep(lKey, lValue, rValue, result))
    end
  let (leftovers, intermediateResult) =
    foldl(stepState, (toList(leftDict), initialResult), rightDict)
  in
    List.foldl(\(( k, v ), result) -> leftStep(k, v, result), intermediateResult, leftovers)


def map(func:(k,a):b, dict: Dict[k,b]): Dict[k,b] =
  select dict
    case RBEmpty ->
      RBEmpty
    case RBNode(color, key, value, left, right) ->
      RBNode(color, key, func(key, value), map(func, left), map(func, right))
  end

def foldl(func:(k, v, b):b, acc: b, dict: Dict[k,v]): b =
  select dict
    case RBEmpty ->
      acc
    case RBNode(_, key, value, left, right) ->
      foldl(func, func(key, value, foldl(func, acc, left)), right)
  end

def foldr(func:(k, v, b):b, acc: b, t: Dict[k,v]): b =
  select t
    case RBEmpty ->
      acc
    case RBNode(_, key, value, left, right) ->
      foldr(func, func(key, value, foldr(func, acc, right)), left)
  end

def filter(isGood:(k, v):Bool, dict: Dict[k,v]): Dict[k,v] =
  foldl(\(k, v, d) -> if isGood(k, v) then insert(k, v, d) else d, empty, dict)

def partition(isGood:(cmp, v):Bool, dict:Dict[cmp,v]): ( Dict[cmp,v], Dict[cmp,v] ) =
  let
    add(key, value, ( t1, t2 )) =
      if isGood(key, value) then
        ( insert(key, value, t1), t2 )
      else
        ( t1, insert(key, value, t2) )
  in
    foldl(add, ( empty, empty ), dict)

def keys(dict: Dict[k,v]): List[k] =
  foldr(\(key, value, keyList) -> key | keyList, [], dict)

def values(dict: Dict[k,v]): List[v] =
  foldr(\(key, value, valueList) -> value | valueList, [], dict)

def toList(dict: Dict[k,v]): List[( k, v )] =
  foldr(\(key, value, list) -> ( key, value ) | list, [], dict)

def fromList(assocs: List[( cmp, v )]): Dict[cmp,v] =
  List.foldl(\((key, value), dict) -> insert(key, value, dict), empty, assocs)
