module Oak.Core.Math

import Oak.Core.Basics exposing *

infix (+) : (left  6) = add
infix (-) : (left  6) = sub
infix (*) : (left  7) = mul
infix (/) : (left  7) = div

alias extern Int

alias extern Float

def extern add(x: number, y: number): number

def extern sub(x: number, y: number): number

def extern mul(x: number, y: number): number

def extern div(x: number, y: number): number

def extern neg(x: number): number

def extern toFloat(n: Int): Float

def extern round(n: Float): Int

def extern floor(n: Float): Int

def extern ceil(n: Float): Int

def extern trunc(n: Float): Int

def extern toPower(pow: number, n: number): number

def extern sqrt(n: Float): Float

def extern remainderBy(n: Int, x: Int): Int

def extern modBy(n: Int, x: Int): Int

def extern logBase(base: Float, n: Float): Float

def extern abs(x: number): number

def pi: Float = 3.141592653589793

def e: Float = 2.718281828459045

def extern isNan(x: number): Bool

def extern isInf(x: number): Bool
