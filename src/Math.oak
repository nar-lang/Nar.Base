module Oak.Core.Math

import Oak.Core.Basics exposing *

infix (+) : (left  6) = add
infix (-) : (left  6) = sub
infix (*) : (left  7) = mul
infix (/) : (left  7) = div

alias native Int

alias native Float

def native add(x: number, y: number): number

def native sub(x: number, y: number): number

def native mul(x: number, y: number): number

def native div(x: number, y: number): number

def native neg(x: number): number

def native toFloat(n: Int): Float

def native round(n: Float): Int

def native floor(n: Float): Int

def native ceil(n: Float): Int

def native trunc(n: Float): Int

def native toPower(pow: number, n: number): number

def native sqrt(n: Float): Float

def native remainderBy(n: Int, x: Int): Int

def native modBy(n: Int, x: Int): Int

def native logBase(base: Float, n: Float): Float

def native abs(x: number): number

def pi: Float = 3.141592653589793

def e: Float = 2.718281828459045

def native isNan(x: number): Bool

def native isInf(x: number): Bool
